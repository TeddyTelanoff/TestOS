#include "Screen.h"
#include "System.h"
#include "Time.h"
#include "Idt.h"
#include "Isr.h"
#include "Irq.h"

struct Box
{
	enum Data
	{
		Width = 9,
		Height = 9,
		Scale = 4,
	};

	static constexpr byte Texture[Width][Height] = {
		{ 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, },
		{ 0x72, 0x72, 0x06, 0x06, 0x06, 0x06, 0x06, 0x72, 0x72, },
		{ 0x72, 0x06, 0x72, 0x06, 0x06, 0x06, 0x72, 0x06, 0x72, },
		{ 0x72, 0x06, 0x06, 0x72, 0x06, 0x72, 0x06, 0x06, 0x72, },
		{ 0x72, 0x06, 0x06, 0x06, 0x72, 0x06, 0x06, 0x06, 0x72, },
		{ 0x72, 0x06, 0x06, 0x72, 0x06, 0x72, 0x06, 0x06, 0x72, },
		{ 0x72, 0x06, 0x72, 0x06, 0x06, 0x06, 0x72, 0x06, 0x72, },
		{ 0x72, 0x72, 0x06, 0x06, 0x06, 0x06, 0x06, 0x72, 0x72, },
		{ 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, },
	};

	int x, y;

	void Draw() const
	{
		for (int py = 0; py < Height * Scale; py++)
				for (int px = 0; px < Width * Scale; px++)
					Screen::SetPixel(x * Scale + px, y * Scale + py, Box::Texture[px / Scale][py / Scale]);
	}

	void Update()
	{
		y++;
	}
};

extern "C" void Main()
{
	Idt::Init();
	Isr::Init();
	Irq::Init();

	Box b = { 1, 1, };
	
	Screen::Clear(0x13);
	b.Draw();
	Screen::SwapBuffers();

	ulong pFrame = 0;
	while (true)
	{
		ulong now = Time::GetTime();
		if (now - pFrame < 1)
			continue;
		pFrame = now;

		b.Update();

		Screen::Clear(0x13);
		b.Draw();
		Screen::SwapBuffers();
	}
}